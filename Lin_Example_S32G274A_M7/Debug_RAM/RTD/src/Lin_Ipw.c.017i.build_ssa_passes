Lin_Ipw_Callback (const uint8 Instance, const struct Linflexd_Lin_Ip_StateStructType * LinflexdStateStruct)
{
  Std_ReturnType TempReturn;
  uint8 Channel;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Instance;
  Channel = Lin_Ipw_au8HwMapping[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = LinflexdStateStruct->CurrentEventId;
  switch (_2) <default: <L24> [INV], case 3: <L15> [INV], case 7 ... 10: <L7> [INV], case 11: <L0> [INV], case 12: <L3> [INV], case 13 ... 14: <L7> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = (int) Channel;
  _4 = Lin_Ipw_apChannelsConfig[_3];
  _5 = _4->LinNodeType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  LinIf_TxConfirmation (Channel);
  goto <bb 12>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  _6 = (int) Channel;
  _7 = Lin_Ipw_apChannelsConfig[_6];
  _8 = _7->LinNodeType;
  if (_8 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = LinflexdStateStruct->SlavePduInfoPtr;
  _10 = _9->SduPtr;
  LinIf_RxIndication (Channel, _10);
  goto <bb 12>; [INV]

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  _11 = (int) Channel;
  _12 = Lin_Ipw_apChannelsConfig[_11];
  _13 = _12->LinNodeType;
  if (_13 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _14 = LinflexdStateStruct->CurrentEventId;
  Lin_Ipw_ErrorCallback (Instance, _14);
  goto <bb 12>; [INV]

  <bb 9> :
<L15>:
  # DEBUG BEGIN_STMT
  _15 = LinflexdStateStruct->SlavePduInfoPtr;
  TempReturn = LinIf_HeaderIndication (Channel, _15);
  # DEBUG BEGIN_STMT
  if (TempReturn != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _16 = LinflexdStateStruct->SlavePduInfoPtr;
  _16->Drc = 2;
  # DEBUG BEGIN_STMT
  _17 = LinflexdStateStruct->SlavePduInfoPtr;
  _17->Dl = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _18 = LinflexdStateStruct->SlavePduInfoPtr;
  Linflexd_Lin_Ip_SendFrame (Instance, _18);
  # DEBUG BEGIN_STMT

  <bb 12> :
<L24>:
  # DEBUG BEGIN_STMT
  _19 = (int) Channel;
  _20 = Lin_Ipw_au8TransmitHeaderCommand[_19];
  if (_20 == 4)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Linflexd_Lin_Ip_GoToSleepMode (Instance);
  # DEBUG BEGIN_STMT
  _21 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_21] = 5;

  <bb 14> :
  return;

}


Lin_Ipw_WakeUpInternal (const uint8 Channel)
{
  uint8 HwUnit;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  Linflexd_Lin_Ip_GotoIdleState (HwUnit);
  return;

}


Lin_Ipw_WakeUp (const uint8 Channel)
{
  uint8 HwUnit;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  Linflexd_Lin_Ip_SendWakeupSignal (HwUnit);
  return;

}


Lin_Ipw_HardwareGetStatus (const uint8 Channel, uint8 * * LinSduPtr)
{
  Linflexd_Lin_Ip_TransferStatusType TransferState;
  uint8 HwUnit;
  Lin_StatusType ReturnStatus;
  Lin_StatusType D.6061;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnStatus = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = (int) Channel;
  _4 = Lin_Ipw_apChannelsConfig[_3];
  _5 = _4->LinNodeType;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TransferState = Linflexd_Lin_Ip_GetStatus (HwUnit, LinSduPtr);
  # DEBUG BEGIN_STMT
  switch (TransferState) <default: <L19> [INV], case 0: <L11> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV], case 4: <L4> [INV], case 5: <L5> [INV], case 6: <L6> [INV], case 7: <L7> [INV], case 8: <L8> [INV], case 9 ... 11: <L11> [INV], case 12: <L9> [INV], case 13: <L10> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 1;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 2;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 3;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 4;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 5;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 6;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 7;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 8;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 9;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 10;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
<L11>:
  # DEBUG BEGIN_STMT
  ReturnStatus = 0;
  # DEBUG BEGIN_STMT

  <bb 15> :
<L19>:
  # DEBUG BEGIN_STMT
  D.6061 = ReturnStatus;
  return D.6061;

}


Lin_Ipw_GoToSleepInternal (const uint8 Channel)
{
  uint8 HwUnit;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6057;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TempReturn = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  _3 = Linflexd_Lin_Ip_AbortTransferData (HwUnit);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = Linflexd_Lin_Ip_GoToSleepMode (HwUnit);
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_5] = 5;
  # DEBUG BEGIN_STMT
  TempReturn = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  TempReturn = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  TempReturn = 2;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6057 = TempReturn;
  return D.6057;

}


Lin_Ipw_GoToSleep (const uint8 Channel)
{
  uint8 SleepDataField[8];
  struct Linflexd_Lin_Ip_PduType SleepFrame;
  uint8 Idx;
  uint8 HwUnit;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6048;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TempReturn = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  Idx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = Linflexd_Lin_Ip_AbortTransferData (HwUnit);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SleepFrame.Dl = 8;
  # DEBUG BEGIN_STMT
  SleepFrame.Drc = 0;
  # DEBUG BEGIN_STMT
  SleepFrame.Cs = 1;
  # DEBUG BEGIN_STMT
  SleepFrame.Pid = 60;
  # DEBUG BEGIN_STMT
  SleepFrame.SduPtr = &SleepDataField;
  # DEBUG BEGIN_STMT
  SleepDataField[0] = 0;
  # DEBUG BEGIN_STMT
  Idx = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = (int) Idx;
  SleepDataField[_4] = 255;
  # DEBUG BEGIN_STMT
  Idx.0_5 = Idx;
  Idx = Idx.0_5 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (Idx <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_6] = 4;
  # DEBUG BEGIN_STMT
  _7 = Linflexd_Lin_Ip_SendFrame (HwUnit, &SleepFrame);
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  TempReturn = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  TempReturn = 2;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6048 = TempReturn;
  SleepFrame = {CLOBBER};
  SleepDataField = {CLOBBER};
  return D.6048;

}


Lin_Ipw_SendFrame (const uint8 Channel, const struct Lin_PduType * PduInfoPtr)
{
  uint8 HwUnit;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6041;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TempReturn = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  _2 = Lin_Ipw_apChannelsConfig[_1];
  HwUnit = _2->LinHwChannel;
  # DEBUG BEGIN_STMT
  _3 = Linflexd_Lin_Ip_AbortTransferData (HwUnit);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = PduInfoPtr->Dl;
  _5 = _4 + 255;
  if (_5 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = Linflexd_Lin_Ip_SendFrame (HwUnit, PduInfoPtr);
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = PduInfoPtr->Drc;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_8] = 2;
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = PduInfoPtr->Drc;
  if (_9 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_10] = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_11] = 3;

  <bb 10> :
  # DEBUG BEGIN_STMT
  TempReturn = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  TempReturn = 2;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.6041 = TempReturn;
  return D.6041;

}


Lin_Ipw_InitChannel (const uint8 Channel, const struct Lin_HwConfigType * ChannelConfigPtr)
{
  const struct Linflexd_Lin_Ip_UserConfigType * TempPointer;
  uint8 HwUnit;

  <bb 2> :
  # DEBUG BEGIN_STMT
  HwUnit = ChannelConfigPtr->LinHwChannel;
  # DEBUG BEGIN_STMT
  _1 = (int) HwUnit;
  Lin_Ipw_au8HwMapping[_1] = Channel;
  # DEBUG BEGIN_STMT
  _2 = (int) Channel;
  Lin_Ipw_apChannelsConfig[_2] = ChannelConfigPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TempPointer = ChannelConfigPtr->LinFlexdConfig;
  # DEBUG BEGIN_STMT
  Linflexd_Lin_Ip_Init (HwUnit, TempPointer);
  # DEBUG BEGIN_STMT
  _3 = (int) Channel;
  Lin_Ipw_au8TransmitHeaderCommand[_3] = 5;
  # DEBUG BEGIN_STMT
  Linflexd_Lin_Ip_GoToSleepMode (HwUnit);
  return;

}


Lin_Ipw_CheckWakeup (const uint8 Channel)
{
  const struct Lin_HwConfigType * ChannelConfigPtr;
  boolean IsWakeup;
  Std_ReturnType RetVal;
  Std_ReturnType D.6024;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  ChannelConfigPtr = Lin_Ipw_apChannelsConfig[_1];
  # DEBUG BEGIN_STMT
  _2 = ChannelConfigPtr->LinHwChannel;
  _3 = (long unsigned int) _2;
  IsWakeup = Linflexd_Lin_Ip_CheckWakeup (_3);
  # DEBUG BEGIN_STMT
  if (IsWakeup != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6024 = RetVal;
  return D.6024;

}


Lin_Ipw_ErrorCallback (const uint8 Instance, const Linflexd_Lin_Ip_EventIdType CurrentEvent)
{
  uint8 Channel;
  uint8 * Buffer;
  Linflexd_Lin_Ip_TransferStatusType TransferStatus;
  Lin_SlaveErrorType SlaveError;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Instance;
  Channel = Lin_Ipw_au8HwMapping[_1];
  # DEBUG BEGIN_STMT
  TransferStatus = Linflexd_Lin_Ip_GetStatus (Instance, &Buffer);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (CurrentEvent) <default: <L17> [INV], case 7: <L13> [INV], case 8: <L0> [INV], case 9: <L4> [INV], case 10: <L11> [INV], case 13: <L5> [INV], case 14: <L12> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  if (TransferStatus == 11)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SlaveError = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SlaveError = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, SlaveError);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, 3);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  SlaveError = 0;
  # DEBUG BEGIN_STMT
  switch (TransferStatus) <default: <L16> [INV], case 7: <L7> [INV], case 8: <L8> [INV], case 11: <L6> [INV]>

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  SlaveError = 0;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  SlaveError = 5;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  SlaveError = 4;
  # DEBUG BEGIN_STMT

  <bb 12> :
<L16>:
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, SlaveError);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 13> :
<L11>:
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, 2);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 14> :
<L12>:
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, 0);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 15> :
<L13>:
  # DEBUG BEGIN_STMT
  LinIf_LinErrorIndication (Channel, 5);
  # DEBUG BEGIN_STMT

  <bb 16> :
<L17>:
  Buffer = {CLOBBER};
  return;

}


