Clock_Ip_CompleteDfsMfiMfn (Clock_Ip_NameType DfsName)
{
  uint32 DividerIndex;
  uint32 Instance;
  Clock_Ip_DfsStatusType Status;
  uint32 DfsPortStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  unsigned char _1;
  unsigned char _2;
  struct DFS_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  struct DFS_Type * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int TimeoutTicks.0_11;
  _Bool _12;
  Clock_Ip_DfsStatusType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TimeoutOccurred_16 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Status_17 = 2;
  # DEBUG Status => Status_17
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[DfsName_19(D)][0];
  Instance_20 = (uint32) _1;
  # DEBUG Instance => Instance_20
  # DEBUG BEGIN_STMT
  _2 = Clock_Ip_au8ClockFeatures[DfsName_19(D)][5];
  DividerIndex_21 = (uint32) _2;
  # DEBUG DividerIndex => DividerIndex_21
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_apxDfs[Instance_20];
  _4 ={v} _3->PORTRESET;
  _5 = _4 >> DividerIndex_21;
  _6 = _5 & 1;
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_apxDfs[Instance_20];
  _8 ={v} _7->PORTSR;
  _9 = 1 << DividerIndex_21;
  _10 = _8 & _9;
  DfsPortStatus_24 = _10 & 63;
  # DEBUG DfsPortStatus => DfsPortStatus_24
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_11 = TimeoutTicks;
  TimeoutOccurred_26 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_11);
  # DEBUG TimeoutOccurred => TimeoutOccurred_26
  # DEBUG BEGIN_STMT
  if (DfsPortStatus_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = ~TimeoutOccurred_26;
  if (_12 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_26 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_27 = 1;
  # DEBUG Status => Status_27
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, DfsName_19(D));
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Status_22 = 0;
  # DEBUG Status => Status_22

  <bb 9> :
  # Status_13 = PHI <Status_27(7), Status_22(8), Status_17(6)>
  # DEBUG Status => Status_13
  # DEBUG BEGIN_STMT
  _29 = Status_13;
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return _29;

}


Clock_Ip_SetDfsMfiMfn (const struct Clock_Ip_FracDivConfigType * Config)
{
  uint32 Value;
  uint32 FractionalPart;
  uint32 IntegerPart;
  uint32 DividerIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct DFS_Type * _9;
  struct DFS_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  struct DFS_Type * _14;
  long unsigned int _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_18(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_19 = (uint32) _2;
  # DEBUG Instance => Instance_19
  # DEBUG BEGIN_STMT
  _3 = Config_18(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex_20 = (uint32) _4;
  # DEBUG DividerIndex => DividerIndex_20
  # DEBUG BEGIN_STMT
  IntegerPart_21 = Config_18(D)->Value[0];
  # DEBUG IntegerPart => IntegerPart_21
  # DEBUG BEGIN_STMT
  FractionalPart_22 = Config_18(D)->Value[1];
  # DEBUG FractionalPart => FractionalPart_22
  # DEBUG BEGIN_STMT
  Value_23 = 0;
  # DEBUG Value => Value_23
  # DEBUG BEGIN_STMT
  _5 = Config_18(D)->Enable;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = FractionalPart_22 & 63;
  Value_24 = Value_23 | _6;
  # DEBUG Value => Value_24
  # DEBUG BEGIN_STMT
  _7 = IntegerPart_21 << 8;
  _8 = _7 & 65535;
  Value_25 = Value_24 | _8;
  # DEBUG Value => Value_25
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxDfs[Instance_19];
  _9->DVPORT[DividerIndex_20] ={v} Value_25;
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_apxDfs[Instance_19];
  _11 ={v} _10->PORTRESET;
  _12 = 1 << DividerIndex_20;
  _13 = ~_12;
  _14 = Clock_Ip_apxDfs[Instance_19];
  _15 = _11 & _13;
  _14->PORTRESET ={v} _15;

  <bb 4> :
  return;

}


Clock_Ip_ResetDfsMfiMfn (const struct Clock_Ip_FracDivConfigType * Config)
{
  uint32 DividerIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  struct DFS_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  struct DFS_Type * _8;
  long unsigned int _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_11(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_12 = (uint32) _2;
  # DEBUG Instance => Instance_12
  # DEBUG BEGIN_STMT
  _3 = Config_11(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex_13 = (uint32) _4;
  # DEBUG DividerIndex => DividerIndex_13
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxDfs[Instance_12];
  _6 ={v} _5->PORTRESET;
  _7 = 1 << DividerIndex_13;
  _8 = Clock_Ip_apxDfs[Instance_12];
  _9 = _6 | _7;
  _8->PORTRESET ={v} _9;
  return;

}


Clock_Ip_CallbackFracDivEmptyComplete (Clock_Ip_NameType DfsName)
{
  Clock_Ip_DfsStatusType _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 0;
  return _1;

}


Clock_Ip_CallbackFracDivEmpty (const struct Clock_Ip_FracDivConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


