
Marking local functions:


Marking externally visible functions:


Marking externally visible variables: Clock_Ip_axFracDivCallbacks


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_ReportClockErrors/10 (Clock_Ip_ReportClockErrors) @05fe7c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_CompleteDfsMfiMfn/4 
  Calls: 
Clock_Ip_TimeoutExpired/9 (Clock_Ip_TimeoutExpired) @05fe7b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_CompleteDfsMfiMfn/4 
  Calls: 
Clock_Ip_StartTimeout/8 (Clock_Ip_StartTimeout) @05fe7a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_CompleteDfsMfiMfn/4 
  Calls: 
Clock_Ip_apxDfs/7 (Clock_Ip_apxDfs) @05fe1e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CompleteDfsMfiMfn/4 (read)Clock_Ip_CompleteDfsMfiMfn/4 (read)Clock_Ip_SetDfsMfiMfn/3 (read)Clock_Ip_SetDfsMfiMfn/3 (read)Clock_Ip_SetDfsMfiMfn/3 (read)Clock_Ip_ResetDfsMfiMfn/2 (read)Clock_Ip_ResetDfsMfiMfn/2 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/6 (Clock_Ip_au8ClockFeatures) @05fe1e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CompleteDfsMfiMfn/4 (read)Clock_Ip_CompleteDfsMfiMfn/4 (read)Clock_Ip_SetDfsMfiMfn/3 (read)Clock_Ip_SetDfsMfiMfn/3 (read)Clock_Ip_ResetDfsMfiMfn/2 (read)Clock_Ip_ResetDfsMfiMfn/2 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFracDivCallbacks/5 (Clock_Ip_axFracDivCallbacks) @05fe17e0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_CallbackFracDivEmpty/0 (addr)Clock_Ip_CallbackFracDivEmpty/0 (addr)Clock_Ip_CallbackFracDivEmptyComplete/1 (addr)Clock_Ip_ResetDfsMfiMfn/2 (addr)Clock_Ip_SetDfsMfiMfn/3 (addr)Clock_Ip_CompleteDfsMfiMfn/4 (addr)
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_CompleteDfsMfiMfn/4 (Clock_Ip_CompleteDfsMfiMfn) @05fe7460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_apxDfs/7 (read)Clock_Ip_apxDfs/7 (read)
  Referring: Clock_Ip_axFracDivCallbacks/5 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Clock_Ip_ReportClockErrors/10 Clock_Ip_TimeoutExpired/9 Clock_Ip_StartTimeout/8 
Clock_Ip_SetDfsMfiMfn/3 (Clock_Ip_SetDfsMfiMfn) @05fe71c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_apxDfs/7 (read)Clock_Ip_apxDfs/7 (read)Clock_Ip_apxDfs/7 (read)
  Referring: Clock_Ip_axFracDivCallbacks/5 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Clock_Ip_ResetDfsMfiMfn/2 (Clock_Ip_ResetDfsMfiMfn) @05fe0c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_au8ClockFeatures/6 (read)Clock_Ip_apxDfs/7 (read)Clock_Ip_apxDfs/7 (read)
  Referring: Clock_Ip_axFracDivCallbacks/5 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Clock_Ip_CallbackFracDivEmptyComplete/1 (Clock_Ip_CallbackFracDivEmptyComplete) @05fe0e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axFracDivCallbacks/5 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Clock_Ip_CallbackFracDivEmpty/0 (Clock_Ip_CallbackFracDivEmpty) @05fe0b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axFracDivCallbacks/5 (addr)Clock_Ip_axFracDivCallbacks/5 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Clock_Ip_CompleteDfsMfiMfn (Clock_Ip_NameType DfsName)
{
  uint32 DividerIndex;
  uint32 Instance;
  Clock_Ip_DfsStatusType Status;
  uint32 DfsPortStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  Clock_Ip_DfsStatusType D.6602;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Status = 2;
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[DfsName][0];
  Instance = (uint32) _1;
  # DEBUG BEGIN_STMT
  _2 = Clock_Ip_au8ClockFeatures[DfsName][5];
  DividerIndex = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_apxDfs[Instance];
  _4 = _3->PORTRESET;
  _5 = _4 >> DividerIndex;
  _6 = _5 & 1;
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_apxDfs[Instance];
  _8 = _7->PORTSR;
  _9 = 1 << DividerIndex;
  _10 = _8 & _9;
  DfsPortStatus = _10 & 63;
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_11 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_11);
  # DEBUG BEGIN_STMT
  if (DfsPortStatus == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = ~TimeoutOccurred;
  if (_12 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status = 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, DfsName);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Status = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6602 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return D.6602;

}


Clock_Ip_SetDfsMfiMfn (const struct Clock_Ip_FracDivConfigType * Config)
{
  uint32 Value;
  uint32 FractionalPart;
  uint32 IntegerPart;
  uint32 DividerIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  IntegerPart = Config->Value[0];
  # DEBUG BEGIN_STMT
  FractionalPart = Config->Value[1];
  # DEBUG BEGIN_STMT
  Value = 0;
  # DEBUG BEGIN_STMT
  _5 = Config->Enable;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = FractionalPart & 63;
  Value = Value | _6;
  # DEBUG BEGIN_STMT
  _7 = IntegerPart << 8;
  _8 = _7 & 65535;
  Value = Value | _8;
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxDfs[Instance];
  _9->DVPORT[DividerIndex] = Value;
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_apxDfs[Instance];
  _11 = _10->PORTRESET;
  _12 = 1 << DividerIndex;
  _13 = ~_12;
  _14 = Clock_Ip_apxDfs[Instance];
  _15 = _11 & _13;
  _14->PORTRESET = _15;

  <bb 4> :
  return;

}


Clock_Ip_ResetDfsMfiMfn (const struct Clock_Ip_FracDivConfigType * Config)
{
  uint32 DividerIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxDfs[Instance];
  _6 = _5->PORTRESET;
  _7 = 1 << DividerIndex;
  _8 = Clock_Ip_apxDfs[Instance];
  _9 = _6 | _7;
  _8->PORTRESET = _9;
  return;

}


Clock_Ip_CallbackFracDivEmptyComplete (Clock_Ip_NameType DfsName)
{
  Clock_Ip_DfsStatusType D.6607;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6607 = 0;
  return D.6607;

}


Clock_Ip_CallbackFracDivEmpty (const struct Clock_Ip_FracDivConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


