Clock_Ip_GetConfiguredFrequencyValue (Clock_Ip_NameType ClockName)
{
  uint32 Index;
  uint32 ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.19_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.20_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.21_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.22_5;
  unsigned char _6;
  long unsigned int _7;
  uint32 _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_10 = 0;
  # DEBUG ReturnValue => ReturnValue_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.19_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.19_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_12 = 0;
  # DEBUG Index => Index_12
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.20_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.20_2->ConfiguredFrequencies[Index_9].Name;
  if (ClockName_13(D) == _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.21_4 = Clock_Ip_pxConfig;
  ReturnValue_15 = Clock_Ip_pxConfig.21_4->ConfiguredFrequencies[Index_9].ConfiguredFrequencyValue;
  # DEBUG ReturnValue => ReturnValue_15
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_14 = Index_9 + 1;
  # DEBUG Index => Index_14

  <bb 7> :
  # Index_9 = PHI <Index_12(3), Index_14(6)>
  # DEBUG Index => Index_9
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.22_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.22_5->ConfigureFrequenciesCount;
  _7 = (long unsigned int) _6;
  if (Index_9 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_8 = PHI <ReturnValue_10(2), ReturnValue_15(5), ReturnValue_10(7)>
  # DEBUG ReturnValue => ReturnValue_8
  # DEBUG BEGIN_STMT
  _16 = ReturnValue_8;
  return _16;

}


Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _7;
  boolean _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _7 = OsIf_GetElapsed (StartTimeInOut_5(D), 0);
  _1 = *ElapsedTimeInOut_8(D);
  _2 = _7 + _1;
  *ElapsedTimeInOut_8(D) = _2;
  # DEBUG BEGIN_STMT
  _3 = *ElapsedTimeInOut_8(D);
  _11 = TimeoutTicks_10(D) <= _3;
  return _11;

}


Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  # DEBUG BEGIN_STMT
  *ElapsedTimeOut_7(D) = 0;
  # DEBUG BEGIN_STMT
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}


Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  void (*<T497>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.18_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.18_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.18_1 (Error_3(D), ClockName_4(D));
  return;

}


Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T68a>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 0);
  return;

}


Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T68a>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 1);
  return;

}


Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback = Callback_2(D);
  return;

}


Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T624>) (Clock_Ip_NameType) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Clear;
  _4 (ClockName_6(D));
  return;

}


Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  Clock_Ip_CmuStatusType (*<T69b>) (Clock_Ip_NameType) _4;
  Clock_Ip_CmuStatusType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].GetStatus;
  _9 = _4 (ClockName_6(D));
  return _9;

}


Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T624>) (Clock_Ip_NameType) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Disable;
  _4 (ClockName_6(D));
  return;

}


Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.5_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.6_2;
  <unnamed type> _3;
  <unnamed type> _4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.7_5;
  <unnamed type> _6;
  unsigned char _7;
  int _8;
  unsigned char _9;
  void (*<T679>) (const struct Clock_Ip_SelectorConfigType *) _10;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.8_11;
  const struct Clock_Ip_SelectorConfigType * _12;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.9_13;
  unsigned char _14;
  long unsigned int _15;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.10_16;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.11_17;
  <unnamed type> _18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  void (*<T685>) (const struct Clock_Ip_GateConfigType *) _22;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.12_23;
  const struct Clock_Ip_GateConfigType * _24;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_25;
  unsigned char _26;
  long unsigned int _27;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.14_28;
  const struct Clock_IP_SpecificPeriphConfigType * _29;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_30;
  <unnamed type> _31;
  unsigned char _32;
  int _33;
  unsigned char _34;
  void (*<T695>) (const struct Clock_Ip_CmuConfigType *) _35;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.16_36;
  const struct Clock_Ip_CmuConfigType * _37;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.17_38;
  unsigned char _39;
  long unsigned int _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.5_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.5_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_50 = 0;
  # DEBUG Index => Index_50
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.6_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.6_2->Selectors[Index_41].Value;
  _4 = Clock_Ip_aeSourceTypeClockName[_3];
  if (_4 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.7_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.7_5->Selectors[Index_41].Name;
  _7 = Clock_Ip_au8ClockFeatures[_6][1];
  _8 = (int) _7;
  _9 = Clock_Ip_au8SelectorCallbackIndex[_8];
  CallbackIndex_60 = (uint32) _9;
  # DEBUG CallbackIndex => CallbackIndex_60
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axSelectorCallbacks[CallbackIndex_60].Set;
  Clock_Ip_pxConfig.8_11 = Clock_Ip_pxConfig;
  _12 = &Clock_Ip_pxConfig.8_11->Selectors[Index_41];
  _10 (_12);

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_62 = Index_41 + 1;
  # DEBUG Index => Index_62

  <bb 7> :
  # Index_41 = PHI <Index_50(3), Index_62(6)>
  # DEBUG Index => Index_41
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.9_13 = Clock_Ip_pxConfig;
  _14 = Clock_Ip_pxConfig.9_13->SelectorsCount;
  _15 = (long unsigned int) _14;
  if (Index_41 < _15)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.10_16 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.10_16 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index_51 = 0;
  # DEBUG Index => Index_51
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.11_17 = Clock_Ip_pxConfig;
  _18 = Clock_Ip_pxConfig.11_17->Gates[Index_42].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8GateCallbackIndex[_20];
  CallbackIndex_57 = (uint32) _21;
  # DEBUG CallbackIndex => CallbackIndex_57
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axGateCallbacks[CallbackIndex_57].Set;
  Clock_Ip_pxConfig.12_23 = Clock_Ip_pxConfig;
  _24 = &Clock_Ip_pxConfig.12_23->Gates[Index_42];
  _22 (_24);
  # DEBUG BEGIN_STMT
  Index_59 = Index_42 + 1;
  # DEBUG Index => Index_59

  <bb 11> :
  # Index_42 = PHI <Index_51(9), Index_59(10)>
  # DEBUG Index => Index_42
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.13_25 = Clock_Ip_pxConfig;
  _26 = Clock_Ip_pxConfig.13_25->GatesCount;
  _27 = (long unsigned int) _26;
  if (Index_42 < _27)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.14_28 = Clock_Ip_pxConfig;
  _29 = &Clock_Ip_pxConfig.14_28->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_29);
  # DEBUG BEGIN_STMT
  Index_53 = 0;
  # DEBUG Index => Index_53
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.15_30 = Clock_Ip_pxConfig;
  _31 = Clock_Ip_pxConfig.15_30->Cmus[Index_43].Name;
  _32 = Clock_Ip_au8ClockFeatures[_31][1];
  _33 = (int) _32;
  _34 = Clock_Ip_au8CmuCallbackIndex[_33];
  CallbackIndex_54 = (uint32) _34;
  # DEBUG CallbackIndex => CallbackIndex_54
  # DEBUG BEGIN_STMT
  _35 = Clock_Ip_axCmuCallbacks[CallbackIndex_54].Enable;
  Clock_Ip_pxConfig.16_36 = Clock_Ip_pxConfig;
  _37 = &Clock_Ip_pxConfig.16_36->Cmus[Index_43];
  _35 (_37);
  # DEBUG BEGIN_STMT
  Index_56 = Index_43 + 1;
  # DEBUG Index => Index_56

  <bb 14> :
  # Index_43 = PHI <Index_53(12), Index_56(13)>
  # DEBUG Index => Index_43
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.17_38 = Clock_Ip_pxConfig;
  _39 = Clock_Ip_pxConfig.17_38->CmusCount;
  _40 = (long unsigned int) _39;
  if (Index_43 < _40)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  return;

}


Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_DfsStatusType DfsStatus;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  Clock_Ip_PllStatusReturnType (*<T66c>) (Clock_Ip_NameType) _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  Clock_Ip_DfsStatusType (*<T65b>) (Clock_Ip_NameType) _11;
  <unnamed type> _12;
  Clock_Ip_PllStatusType _38;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetValue_23 = 2;
  # DEBUG RetValue => RetValue_23
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index_24 = 0;
  # DEBUG Index => Index_24
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_aeHwPllName[Index_17];
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8PllCallbackIndex[_3];
  CallbackIndex_26 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_26
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axPllCallbacks[CallbackIndex_26].Complete;
  _6 = Clock_Ip_aeHwPllName[Index_17];
  PllStatus_28 = _5 (_6);
  # DEBUG PllStatus => PllStatus_28
  # DEBUG BEGIN_STMT
  if (PllStatus_28 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetValue_31 = 1;
  # DEBUG RetValue => RetValue_31
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (PllStatus_28 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetValue_29 = 0;
  # DEBUG RetValue => RetValue_29

  <bb 7> :
  # RetValue_13 = PHI <RetValue_14(5), RetValue_29(6)>
  # DEBUG RetValue => RetValue_13
  # DEBUG BEGIN_STMT
  Index_30 = Index_17 + 1;
  # DEBUG Index => Index_30

  <bb 8> :
  # RetValue_14 = PHI <RetValue_23(2), RetValue_13(7)>
  # Index_17 = PHI <Index_24(2), Index_30(7)>
  # DEBUG Index => Index_17
  # DEBUG RetValue => RetValue_14
  # DEBUG BEGIN_STMT
  if (Index_17 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # RetValue_15 = PHI <RetValue_31(4), RetValue_14(8)>
  # DEBUG RetValue => RetValue_15
  # DEBUG BEGIN_STMT
  if (RetValue_15 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Index_32 = 0;
  # DEBUG Index => Index_32
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_aeHwDfsName[Index_18];
  _8 = Clock_Ip_au8ClockFeatures[_7][1];
  _9 = (int) _8;
  _10 = Clock_Ip_au8FractionalDividerCallbackIndex[_9];
  CallbackIndex_33 = (uint32) _10;
  # DEBUG CallbackIndex => CallbackIndex_33
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_axFracDivCallbacks[CallbackIndex_33].Complete;
  _12 = Clock_Ip_aeHwDfsName[Index_18];
  DfsStatus_35 = _11 (_12);
  # DEBUG DfsStatus => DfsStatus_35
  # DEBUG BEGIN_STMT
  if (DfsStatus_35 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetValue_37 = 1;
  # DEBUG RetValue => RetValue_37
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Index_36 = Index_18 + 1;
  # DEBUG Index => Index_36

  <bb 14> :
  # Index_18 = PHI <Index_32(10), Index_36(13)>
  # DEBUG Index => Index_18
  # DEBUG BEGIN_STMT
  if (Index_18 <= 11)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # RetValue_16 = PHI <RetValue_15(9), RetValue_37(12), RetValue_15(14)>
  # DEBUG RetValue => RetValue_16
  # DEBUG BEGIN_STMT
  _38 = RetValue_16;
  return _38;

}


Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.1_1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  void (*<T695>) (const struct Clock_Ip_CmuConfigType *) _6;
  const struct Clock_Ip_CmuConfigType * _7;
  unsigned char _8;
  long unsigned int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  void (*<T621>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  const struct Clock_Ip_IrcoscConfigType * _15;
  unsigned char _16;
  long unsigned int _17;
  <unnamed type> _18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  void (*<T630>) (const struct Clock_Ip_XoscConfigType *) _22;
  const struct Clock_Ip_XoscConfigType * _23;
  unsigned char _24;
  long unsigned int _25;
  <unnamed type> _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  void (*<T6a7>) (const struct Clock_Ip_PcfsConfigType *) _30;
  const struct Clock_Ip_PcfsConfigType * _31;
  unsigned char _32;
  long unsigned int _33;
  <unnamed type> _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  void (*<T649>) (const struct Clock_Ip_DividerTriggerConfigType *) _38;
  const struct Clock_Ip_DividerTriggerConfigType * _39;
  unsigned char _40;
  long unsigned int _41;
  <unnamed type> _42;
  unsigned char _43;
  int _44;
  unsigned char _45;
  void (*<T63e>) (const struct Clock_Ip_DividerConfigType *) _46;
  const struct Clock_Ip_DividerConfigType * _47;
  unsigned char _48;
  long unsigned int _49;
  <unnamed type> _50;
  unsigned char _51;
  int _52;
  unsigned char _53;
  void (*<T649>) (const struct Clock_Ip_DividerTriggerConfigType *) _54;
  const struct Clock_Ip_DividerTriggerConfigType * _55;
  unsigned char _56;
  long unsigned int _57;
  <unnamed type> _58;
  unsigned char _59;
  int _60;
  unsigned char _61;
  void (*<T666>) (const struct Clock_Ip_PllConfigType *) _62;
  const struct Clock_Ip_PllConfigType * _63;
  unsigned char _64;
  long unsigned int _65;
  <unnamed type> _66;
  unsigned char _67;
  int _68;
  unsigned char _69;
  void (*<T695>) (const struct Clock_Ip_CmuConfigType *) _70;
  const struct Clock_Ip_CmuConfigType * _71;
  unsigned char _72;
  long unsigned int _73;
  <unnamed type> _74;
  unsigned char _75;
  int _76;
  unsigned char _77;
  void (*<T630>) (const struct Clock_Ip_XoscConfigType *) _78;
  const struct Clock_Ip_XoscConfigType * _79;
  unsigned char _80;
  long unsigned int _81;
  <unnamed type> _82;
  unsigned char _83;
  int _84;
  unsigned char _85;
  void (*<T666>) (const struct Clock_Ip_PllConfigType *) _86;
  const struct Clock_Ip_PllConfigType * _87;
  unsigned char _88;
  long unsigned int _89;
  <unnamed type> _90;
  unsigned char _91;
  int _92;
  unsigned char _93;
  void (*<T655>) (const struct Clock_Ip_FracDivConfigType *) _94;
  const struct Clock_Ip_FracDivConfigType * _95;
  unsigned char _96;
  long unsigned int _97;
  <unnamed type> _98;
  <unnamed type> _99;
  <unnamed type> _100;
  unsigned char _101;
  int _102;
  unsigned char _103;
  void (*<T679>) (const struct Clock_Ip_SelectorConfigType *) _104;
  const struct Clock_Ip_SelectorConfigType * _105;
  unsigned char _106;
  long unsigned int _107;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.2_108;
  _Bool _109;
  <unnamed type> _110;
  unsigned char _111;
  int _112;
  unsigned char _113;
  void (*<T685>) (const struct Clock_Ip_GateConfigType *) _114;
  const struct Clock_Ip_GateConfigType * _115;
  unsigned char _116;
  long unsigned int _117;
  const struct Clock_IP_SpecificPeriphConfigType * _118;
  <unnamed type> _119;
  unsigned char _120;
  int _121;
  unsigned char _122;
  void (*<T695>) (const struct Clock_Ip_CmuConfigType *) _123;
  const struct Clock_Ip_CmuConfigType * _124;
  unsigned char _125;
  long unsigned int _126;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig = Config_161(D);
  # DEBUG BEGIN_STMT
  Clock_Ip_SpecificPlatformInitClock (Config_161(D));
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.1_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.1_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_164 = 0;
  # DEBUG Index => Index_164
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Config_161(D)->Cmus[Index_127].Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][1];
  _4 = (int) _3;
  _5 = Clock_Ip_au8CmuCallbackIndex[_4];
  CallbackIndex_165 = (uint32) _5;
  # DEBUG CallbackIndex => CallbackIndex_165
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[CallbackIndex_165].Reset;
  _7 = &Config_161(D)->Cmus[Index_127];
  _6 (_7);
  # DEBUG BEGIN_STMT
  Index_167 = Index_127 + 1;
  # DEBUG Index => Index_167

  <bb 5> :
  # Index_127 = PHI <Index_164(3), Index_167(4)>
  # DEBUG Index => Index_127
  # DEBUG BEGIN_STMT
  _8 = Config_161(D)->CmusCount;
  _9 = (long unsigned int) _8;
  if (Index_127 < _9)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ResetClockConfiguration (Config_161(D));
  # DEBUG BEGIN_STMT
  Index_169 = 0;
  # DEBUG Index => Index_169
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Config_161(D)->Ircoscs[Index_128].Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][1];
  _12 = (int) _11;
  _13 = Clock_Ip_au8IrcoscCallbackIndex[_12];
  CallbackIndex_226 = (uint32) _13;
  # DEBUG CallbackIndex => CallbackIndex_226
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[CallbackIndex_226].Set;
  _15 = &Config_161(D)->Ircoscs[Index_128];
  _14 (_15);
  # DEBUG BEGIN_STMT
  Index_228 = Index_128 + 1;
  # DEBUG Index => Index_228

  <bb 8> :
  # Index_128 = PHI <Index_169(6), Index_228(7)>
  # DEBUG Index => Index_128
  # DEBUG BEGIN_STMT
  _16 = Config_161(D)->IrcoscsCount;
  _17 = (long unsigned int) _16;
  if (Index_128 < _17)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index_170 = 0;
  # DEBUG Index => Index_170
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _18 = Config_161(D)->Xoscs[Index_129].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8XoscCallbackIndex[_20];
  CallbackIndex_223 = (uint32) _21;
  # DEBUG CallbackIndex => CallbackIndex_223
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axExtOscCallbacks[CallbackIndex_223].Set;
  _23 = &Config_161(D)->Xoscs[Index_129];
  _22 (_23);
  # DEBUG BEGIN_STMT
  Index_225 = Index_129 + 1;
  # DEBUG Index => Index_225

  <bb 11> :
  # Index_129 = PHI <Index_170(9), Index_225(10)>
  # DEBUG Index => Index_129
  # DEBUG BEGIN_STMT
  _24 = Config_161(D)->XoscsCount;
  _25 = (long unsigned int) _24;
  if (Index_129 < _25)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_UpdateDriverContext (Config_161(D));
  # DEBUG BEGIN_STMT
  Index_172 = 0;
  # DEBUG Index => Index_172
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _26 = Config_161(D)->Pcfs[Index_130].Name;
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8PcfsCallbackIndex[_28];
  CallbackIndex_220 = (uint32) _29;
  # DEBUG CallbackIndex => CallbackIndex_220
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_axPcfsCallbacks[CallbackIndex_220].Set;
  _31 = &Config_161(D)->Pcfs[Index_130];
  _30 (_31);
  # DEBUG BEGIN_STMT
  Index_222 = Index_130 + 1;
  # DEBUG Index => Index_222

  <bb 14> :
  # Index_130 = PHI <Index_172(12), Index_222(13)>
  # DEBUG Index => Index_130
  # DEBUG BEGIN_STMT
  _32 = Config_161(D)->PcfsCount;
  _33 = (long unsigned int) _32;
  if (Index_130 < _33)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Index_173 = 0;
  # DEBUG Index => Index_173
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _34 = Config_161(D)->DividerTriggers[Index_131].Name;
  _35 = Clock_Ip_au8ClockFeatures[_34][1];
  _36 = (int) _35;
  _37 = Clock_Ip_au8DividerTriggerCallbackIndex[_36];
  CallbackIndex_217 = (uint32) _37;
  # DEBUG CallbackIndex => CallbackIndex_217
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_217].Configure;
  _39 = &Config_161(D)->DividerTriggers[Index_131];
  _38 (_39);
  # DEBUG BEGIN_STMT
  Index_219 = Index_131 + 1;
  # DEBUG Index => Index_219

  <bb 17> :
  # Index_131 = PHI <Index_173(15), Index_219(16)>
  # DEBUG Index => Index_131
  # DEBUG BEGIN_STMT
  _40 = Config_161(D)->DividerTriggersCount;
  _41 = (long unsigned int) _40;
  if (Index_131 < _41)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Index_174 = 0;
  # DEBUG Index => Index_174
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _42 = Config_161(D)->Dividers[Index_132].Name;
  _43 = Clock_Ip_au8ClockFeatures[_42][1];
  _44 = (int) _43;
  _45 = Clock_Ip_au8DividerCallbackIndex[_44];
  CallbackIndex_214 = (uint32) _45;
  # DEBUG CallbackIndex => CallbackIndex_214
  # DEBUG BEGIN_STMT
  _46 = Clock_Ip_axDividerCallbacks[CallbackIndex_214].Set;
  _47 = &Config_161(D)->Dividers[Index_132];
  _46 (_47);
  # DEBUG BEGIN_STMT
  Index_216 = Index_132 + 1;
  # DEBUG Index => Index_216

  <bb 20> :
  # Index_132 = PHI <Index_174(18), Index_216(19)>
  # DEBUG Index => Index_132
  # DEBUG BEGIN_STMT
  _48 = Config_161(D)->DividersCount;
  _49 = (long unsigned int) _48;
  if (Index_132 < _49)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Index_175 = 0;
  # DEBUG Index => Index_175
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _50 = Config_161(D)->DividerTriggers[Index_133].Name;
  _51 = Clock_Ip_au8ClockFeatures[_50][1];
  _52 = (int) _51;
  _53 = Clock_Ip_au8DividerTriggerCallbackIndex[_52];
  CallbackIndex_211 = (uint32) _53;
  # DEBUG CallbackIndex => CallbackIndex_211
  # DEBUG BEGIN_STMT
  _54 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_211].TriggerUpdate;
  _55 = &Config_161(D)->DividerTriggers[Index_133];
  _54 (_55);
  # DEBUG BEGIN_STMT
  Index_213 = Index_133 + 1;
  # DEBUG Index => Index_213

  <bb 23> :
  # Index_133 = PHI <Index_175(21), Index_213(22)>
  # DEBUG Index => Index_133
  # DEBUG BEGIN_STMT
  _56 = Config_161(D)->DividerTriggersCount;
  _57 = (long unsigned int) _56;
  if (Index_133 < _57)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Index_176 = 0;
  # DEBUG Index => Index_176
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _58 = Config_161(D)->Plls[Index_134].Name;
  _59 = Clock_Ip_au8ClockFeatures[_58][1];
  _60 = (int) _59;
  _61 = Clock_Ip_au8PllCallbackIndex[_60];
  CallbackIndex_208 = (uint32) _61;
  # DEBUG CallbackIndex => CallbackIndex_208
  # DEBUG BEGIN_STMT
  _62 = Clock_Ip_axPllCallbacks[CallbackIndex_208].Set;
  _63 = &Config_161(D)->Plls[Index_134];
  _62 (_63);
  # DEBUG BEGIN_STMT
  Index_210 = Index_134 + 1;
  # DEBUG Index => Index_210

  <bb 26> :
  # Index_134 = PHI <Index_176(24), Index_210(25)>
  # DEBUG Index => Index_134
  # DEBUG BEGIN_STMT
  _64 = Config_161(D)->PllsCount;
  _65 = (long unsigned int) _64;
  if (Index_134 < _65)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  Index_177 = 0;
  # DEBUG Index => Index_177
  goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _66 = Config_161(D)->Cmus[Index_135].Name;
  _67 = Clock_Ip_au8ClockFeatures[_66][1];
  _68 = (int) _67;
  _69 = Clock_Ip_au8CmuCallbackIndex[_68];
  CallbackIndex_205 = (uint32) _69;
  # DEBUG CallbackIndex => CallbackIndex_205
  # DEBUG BEGIN_STMT
  _70 = Clock_Ip_axCmuCallbacks[CallbackIndex_205].Set;
  _71 = &Config_161(D)->Cmus[Index_135];
  _70 (_71);
  # DEBUG BEGIN_STMT
  Index_207 = Index_135 + 1;
  # DEBUG Index => Index_207

  <bb 29> :
  # Index_135 = PHI <Index_177(27), Index_207(28)>
  # DEBUG Index => Index_135
  # DEBUG BEGIN_STMT
  _72 = Config_161(D)->CmusCount;
  _73 = (long unsigned int) _72;
  if (Index_135 < _73)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  Index_178 = 0;
  # DEBUG Index => Index_178
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  _74 = Config_161(D)->Xoscs[Index_136].Name;
  _75 = Clock_Ip_au8ClockFeatures[_74][1];
  _76 = (int) _75;
  _77 = Clock_Ip_au8XoscCallbackIndex[_76];
  CallbackIndex_202 = (uint32) _77;
  # DEBUG CallbackIndex => CallbackIndex_202
  # DEBUG BEGIN_STMT
  _78 = Clock_Ip_axExtOscCallbacks[CallbackIndex_202].Complete;
  _79 = &Config_161(D)->Xoscs[Index_136];
  _78 (_79);
  # DEBUG BEGIN_STMT
  Index_204 = Index_136 + 1;
  # DEBUG Index => Index_204

  <bb 32> :
  # Index_136 = PHI <Index_178(30), Index_204(31)>
  # DEBUG Index => Index_136
  # DEBUG BEGIN_STMT
  _80 = Config_161(D)->XoscsCount;
  _81 = (long unsigned int) _80;
  if (Index_136 < _81)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  Index_179 = 0;
  # DEBUG Index => Index_179
  goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  _82 = Config_161(D)->Plls[Index_137].Name;
  _83 = Clock_Ip_au8ClockFeatures[_82][1];
  _84 = (int) _83;
  _85 = Clock_Ip_au8PllCallbackIndex[_84];
  CallbackIndex_199 = (uint32) _85;
  # DEBUG CallbackIndex => CallbackIndex_199
  # DEBUG BEGIN_STMT
  _86 = Clock_Ip_axPllCallbacks[CallbackIndex_199].Enable;
  _87 = &Config_161(D)->Plls[Index_137];
  _86 (_87);
  # DEBUG BEGIN_STMT
  Index_201 = Index_137 + 1;
  # DEBUG Index => Index_201

  <bb 35> :
  # Index_137 = PHI <Index_179(33), Index_201(34)>
  # DEBUG Index => Index_137
  # DEBUG BEGIN_STMT
  _88 = Config_161(D)->PllsCount;
  _89 = (long unsigned int) _88;
  if (Index_137 < _89)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  # DEBUG BEGIN_STMT
  Index_180 = 0;
  # DEBUG Index => Index_180
  goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  _90 = Config_161(D)->FracDivs[Index_138].Name;
  _91 = Clock_Ip_au8ClockFeatures[_90][1];
  _92 = (int) _91;
  _93 = Clock_Ip_au8FractionalDividerCallbackIndex[_92];
  CallbackIndex_196 = (uint32) _93;
  # DEBUG CallbackIndex => CallbackIndex_196
  # DEBUG BEGIN_STMT
  _94 = Clock_Ip_axFracDivCallbacks[CallbackIndex_196].Set;
  _95 = &Config_161(D)->FracDivs[Index_138];
  _94 (_95);
  # DEBUG BEGIN_STMT
  Index_198 = Index_138 + 1;
  # DEBUG Index => Index_198

  <bb 38> :
  # Index_138 = PHI <Index_180(36), Index_198(37)>
  # DEBUG Index => Index_138
  # DEBUG BEGIN_STMT
  _96 = Config_161(D)->FracDivsCount;
  _97 = (long unsigned int) _96;
  if (Index_138 < _97)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 0;
  # DEBUG BEGIN_STMT
  Index_182 = 0;
  # DEBUG Index => Index_182
  goto <bb 44>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  _98 = Config_161(D)->Selectors[Index_139].Value;
  _99 = Clock_Ip_aeSourceTypeClockName[_98];
  if (_99 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  # DEBUG BEGIN_STMT
  _100 = Config_161(D)->Selectors[Index_139].Name;
  _101 = Clock_Ip_au8ClockFeatures[_100][1];
  _102 = (int) _101;
  _103 = Clock_Ip_au8SelectorCallbackIndex[_102];
  CallbackIndex_193 = (uint32) _103;
  # DEBUG CallbackIndex => CallbackIndex_193
  # DEBUG BEGIN_STMT
  _104 = Clock_Ip_axSelectorCallbacks[CallbackIndex_193].Set;
  _105 = &Config_161(D)->Selectors[Index_139];
  _104 (_105);
  goto <bb 43>; [INV]

  <bb 42> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 1;

  <bb 43> :
  # DEBUG BEGIN_STMT
  Index_195 = Index_139 + 1;
  # DEBUG Index => Index_195

  <bb 44> :
  # Index_139 = PHI <Index_182(39), Index_195(43)>
  # DEBUG Index => Index_139
  # DEBUG BEGIN_STMT
  _106 = Config_161(D)->SelectorsCount;
  _107 = (long unsigned int) _106;
  if (Index_139 < _107)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.2_108 = Clock_Ip_bClockTreeIsConsumingPll;
  _109 = ~Clock_Ip_bClockTreeIsConsumingPll.2_108;
  if (_109 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 46> :
  # DEBUG BEGIN_STMT
  Index_183 = 0;
  # DEBUG Index => Index_183
  goto <bb 48>; [INV]

  <bb 47> :
  # DEBUG BEGIN_STMT
  _110 = Config_161(D)->Gates[Index_140].Name;
  _111 = Clock_Ip_au8ClockFeatures[_110][1];
  _112 = (int) _111;
  _113 = Clock_Ip_au8GateCallbackIndex[_112];
  CallbackIndex_189 = (uint32) _113;
  # DEBUG CallbackIndex => CallbackIndex_189
  # DEBUG BEGIN_STMT
  _114 = Clock_Ip_axGateCallbacks[CallbackIndex_189].Set;
  _115 = &Config_161(D)->Gates[Index_140];
  _114 (_115);
  # DEBUG BEGIN_STMT
  Index_191 = Index_140 + 1;
  # DEBUG Index => Index_191

  <bb 48> :
  # Index_140 = PHI <Index_183(46), Index_191(47)>
  # DEBUG Index => Index_140
  # DEBUG BEGIN_STMT
  _116 = Config_161(D)->GatesCount;
  _117 = (long unsigned int) _116;
  if (Index_140 < _117)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  # DEBUG BEGIN_STMT
  _118 = &Config_161(D)->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_118);
  # DEBUG BEGIN_STMT
  Index_185 = 0;
  # DEBUG Index => Index_185
  goto <bb 51>; [INV]

  <bb 50> :
  # DEBUG BEGIN_STMT
  _119 = Config_161(D)->Cmus[Index_141].Name;
  _120 = Clock_Ip_au8ClockFeatures[_119][1];
  _121 = (int) _120;
  _122 = Clock_Ip_au8CmuCallbackIndex[_121];
  CallbackIndex_186 = (uint32) _122;
  # DEBUG CallbackIndex => CallbackIndex_186
  # DEBUG BEGIN_STMT
  _123 = Clock_Ip_axCmuCallbacks[CallbackIndex_186].Enable;
  _124 = &Config_161(D)->Cmus[Index_141];
  _123 (_124);
  # DEBUG BEGIN_STMT
  Index_188 = Index_141 + 1;
  # DEBUG Index => Index_188

  <bb 51> :
  # Index_141 = PHI <Index_185(49), Index_188(50)>
  # DEBUG Index => Index_141
  # DEBUG BEGIN_STMT
  _125 = Config_161(D)->CmusCount;
  _126 = (long unsigned int) _125;
  if (Index_141 < _126)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.0_1;
  Clock_Ip_StatusType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ClockStatus_4 = 1;
  # DEBUG ClockStatus => ClockStatus_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_InitClock (Config_6(D));
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.0_1 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  PllStatus_10 = Clock_Ip_GetPllStatus ();
  # DEBUG PllStatus => PllStatus_10
  # DEBUG BEGIN_STMT
  if (PllStatus_10 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_DistributePll ();
  # DEBUG BEGIN_STMT
  ClockStatus_12 = 0;
  # DEBUG ClockStatus => ClockStatus_12
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ClockStatus_8 = 0;
  # DEBUG ClockStatus => ClockStatus_8

  <bb 6> :
  # ClockStatus_2 = PHI <ClockStatus_12(4), ClockStatus_8(5), ClockStatus_4(3)>
  # DEBUG ClockStatus => ClockStatus_2
  # DEBUG BEGIN_STMT
  _13 = ClockStatus_2;
  return _13;

}


Clock_Ip_ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  unsigned char _1;
  long unsigned int _2;
  <unnamed type> _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  void (*<T679>) (const struct Clock_Ip_SelectorConfigType *) _7;
  long unsigned int _8;
  const struct Clock_Ip_SelectorConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  <unnamed type> _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  void (*<T655>) (const struct Clock_Ip_FracDivConfigType *) _16;
  long unsigned int _17;
  const struct Clock_Ip_FracDivConfigType * _18;
  unsigned char _19;
  long unsigned int _20;
  <unnamed type> _21;
  unsigned char _22;
  int _23;
  unsigned char _24;
  void (*<T666>) (const struct Clock_Ip_PllConfigType *) _25;
  long unsigned int _26;
  const struct Clock_Ip_PllConfigType * _27;
  unsigned char _28;
  long unsigned int _29;
  <unnamed type> _30;
  unsigned char _31;
  int _32;
  unsigned char _33;
  void (*<T630>) (const struct Clock_Ip_XoscConfigType *) _34;
  long unsigned int _35;
  const struct Clock_Ip_XoscConfigType * _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_46(D)->SelectorsCount;
  Index_47 = (uint32) _1;
  # DEBUG Index => Index_47
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Index_37 + 4294967295;
  _3 = Config_46(D)->Selectors[_2].Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][1];
  _5 = (int) _4;
  _6 = Clock_Ip_au8SelectorCallbackIndex[_5];
  CallbackIndex_60 = (uint32) _6;
  # DEBUG CallbackIndex => CallbackIndex_60
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axSelectorCallbacks[CallbackIndex_60].Reset;
  _8 = Index_37 + 4294967295;
  _9 = &Config_46(D)->Selectors[_8];
  _7 (_9);
  # DEBUG BEGIN_STMT
  Index_62 = Index_37 + 4294967295;
  # DEBUG Index => Index_62

  <bb 4> :
  # Index_37 = PHI <Index_47(2), Index_62(3)>
  # DEBUG Index => Index_37
  # DEBUG BEGIN_STMT
  if (Index_37 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = Config_46(D)->FracDivsCount;
  Index_48 = (uint32) _10;
  # DEBUG Index => Index_48
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = Index_38 + 4294967295;
  _12 = Config_46(D)->FracDivs[_11].Name;
  _13 = Clock_Ip_au8ClockFeatures[_12][1];
  _14 = (int) _13;
  _15 = Clock_Ip_au8FractionalDividerCallbackIndex[_14];
  CallbackIndex_57 = (uint32) _15;
  # DEBUG CallbackIndex => CallbackIndex_57
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axFracDivCallbacks[CallbackIndex_57].Reset;
  _17 = Index_38 + 4294967295;
  _18 = &Config_46(D)->FracDivs[_17];
  _16 (_18);
  # DEBUG BEGIN_STMT
  Index_59 = Index_38 + 4294967295;
  # DEBUG Index => Index_59

  <bb 7> :
  # Index_38 = PHI <Index_48(5), Index_59(6)>
  # DEBUG Index => Index_38
  # DEBUG BEGIN_STMT
  if (Index_38 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = Config_46(D)->PllsCount;
  Index_49 = (uint32) _19;
  # DEBUG Index => Index_49
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _20 = Index_39 + 4294967295;
  _21 = Config_46(D)->Plls[_20].Name;
  _22 = Clock_Ip_au8ClockFeatures[_21][1];
  _23 = (int) _22;
  _24 = Clock_Ip_au8PllCallbackIndex[_23];
  CallbackIndex_54 = (uint32) _24;
  # DEBUG CallbackIndex => CallbackIndex_54
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_axPllCallbacks[CallbackIndex_54].Reset;
  _26 = Index_39 + 4294967295;
  _27 = &Config_46(D)->Plls[_26];
  _25 (_27);
  # DEBUG BEGIN_STMT
  Index_56 = Index_39 + 4294967295;
  # DEBUG Index => Index_56

  <bb 10> :
  # Index_39 = PHI <Index_49(8), Index_56(9)>
  # DEBUG Index => Index_39
  # DEBUG BEGIN_STMT
  if (Index_39 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _28 = Config_46(D)->XoscsCount;
  Index_50 = (uint32) _28;
  # DEBUG Index => Index_50
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _29 = Index_40 + 4294967295;
  _30 = Config_46(D)->Xoscs[_29].Name;
  _31 = Clock_Ip_au8ClockFeatures[_30][1];
  _32 = (int) _31;
  _33 = Clock_Ip_au8XoscCallbackIndex[_32];
  CallbackIndex_51 = (uint32) _33;
  # DEBUG CallbackIndex => CallbackIndex_51
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_axExtOscCallbacks[CallbackIndex_51].Reset;
  _35 = Index_40 + 4294967295;
  _36 = &Config_46(D)->Xoscs[_35];
  _34 (_36);
  # DEBUG BEGIN_STMT
  Index_53 = Index_40 + 4294967295;
  # DEBUG Index => Index_53

  <bb 13> :
  # Index_40 = PHI <Index_50(11), Index_53(12)>
  # DEBUG Index => Index_40
  # DEBUG BEGIN_STMT
  if (Index_40 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


Clock_Ip_CallEmptyCallbacks ()
{
  static boolean FunctionWasCalled = 0;
  _Bool FunctionWasCalled.4_1;
  _Bool _2;
  void (*<T695>) (const struct Clock_Ip_CmuConfigType *) _3;
  void (*<T624>) (Clock_Ip_NameType) _4;
  void (*<T624>) (Clock_Ip_NameType) _5;
  Clock_Ip_CmuStatusType (*<T69b>) (Clock_Ip_NameType) _6;
  void (*<T63e>) (const struct Clock_Ip_DividerConfigType *) _7;
  void (*<T649>) (const struct Clock_Ip_DividerTriggerConfigType *) _8;
  void (*<T630>) (const struct Clock_Ip_XoscConfigType *) _9;
  void (*<T655>) (const struct Clock_Ip_FracDivConfigType *) _10;
  Clock_Ip_DfsStatusType (*<T65b>) (Clock_Ip_NameType) _11;
  void (*<T685>) (const struct Clock_Ip_GateConfigType *) _12;
  void (*<T68a>) (Clock_Ip_NameType, boolean) _13;
  void (*<T621>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  void (*<T666>) (const struct Clock_Ip_PllConfigType *) _15;
  Clock_Ip_PllStatusReturnType (*<T66c>) (Clock_Ip_NameType) _16;
  void (*<T679>) (const struct Clock_Ip_SelectorConfigType *) _17;
  void (*<T6a7>) (const struct Clock_Ip_PcfsConfigType *) _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FunctionWasCalled.4_1 = FunctionWasCalled;
  _2 = ~FunctionWasCalled.4_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FunctionWasCalled = 1;
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_axCmuCallbacks[0].Set;
  _3 (0B);
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[0].Disable;
  _4 (181);
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axCmuCallbacks[0].Clear;
  _5 (181);
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[0].GetStatus;
  _6 (181);
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axDividerCallbacks[0].Set;
  _7 (0B);
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _8 (0B);
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _9 (0B);
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axFracDivCallbacks[0].Set;
  _10 (0B);
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _11 (181);
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_axGateCallbacks[0].Set;
  _12 (0B);
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_axGateCallbacks[0].Update;
  _13 (181, 0);
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[0].Set;
  _14 (0B);
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_axPllCallbacks[0].Set;
  _15 (0B);
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axPllCallbacks[0].Complete;
  _16 (181);
  # DEBUG BEGIN_STMT
  _17 = Clock_Ip_axSelectorCallbacks[0].Set;
  _17 (0B);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_axPcfsCallbacks[0].Set;
  _18 (0B);

  <bb 4> :
  return;

}


Clock_Ip_UpdateDriverContext (const struct Clock_Ip_ClockConfigType * Config)
{
  _Bool Clock_Ip_bObjectsAreInitialized.3_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.3_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.3_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_CallEmptyCallbacks ();
  return;

}


Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


